{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","axios","require","default","useState","color","setColor","width","height","brushRadius","setBrushRadius","selectedClass","setSelectedClass","canvasRef","useRef","updateColor","colorStr","className","ref","hideGrid","brushColor","canvasWidth","canvasHeight","style","backgroundColor","onClick","value","onChange","e","target","current","banvas","canvasContainer","children","getContext","clearRect","resetCanvas","asdf","toDataURL","params","headers","data","cls","post","then","response","img","Image","src","x","document","getElementsByClassName","hasChildNodes","removeChild","childNodes","appendChild","catch","error","alert","saveFile","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.16958fa1.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport './App.css';\nimport CanvasDraw from 'react-canvas-draw';\n\n\nexport default function App() {\n  const axios = require('axios').default;\n  const [color, setColor] = useState('#000');\n  const [width, setWidth] = useState(480);\n  const [height, setHeight] = useState(480);\n  const [brushRadius, setBrushRadius] = useState(7);\n  const [selectedClass, setSelectedClass] = useState(0);\n\n  const canvasRef = useRef(null);\n\n  const updateColor = (colorStr) => {\n    setColor(colorStr);\n  }\n\n  const saveFile = () => {\n    if (canvasRef.current) {\n      let asdf = canvasRef.current.canvasContainer.children[1].toDataURL();\n      var params = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        data: asdf,\n        cls: selectedClass\n      }\n      if (asdf !== \"\") {\n        axios.post(\"/query\", params)\n          .then(response => {\n            let img = new Image();\n            img.src = 'data:image/png;base64,' + response.data;\n            var x = document.getElementsByClassName('asdf')[0];\n            if (x.hasChildNodes()) {\n              x.removeChild(x.childNodes[0]);\n            }\n            x.appendChild(img);\n          })\n          .catch(error => {\n            alert(error);\n          });\n      } else {\n        alert(\"Image data is empty for some reason\");\n      }\n    }\n  }\n\n  const resetCanvas = () => {\n    if (canvasRef.current) {\n      var banvas = canvasRef.current.canvasContainer.children[1];\n      var context = banvas.getContext('2d');\n      context.clearRect(0, 0, banvas.width, banvas.height);\n    }\n  }\n  return (\n    <body>\n\n      <h1>CIFAR-10 Sketch Completion Demo</h1>\n      <p>Note: Your sketch will be downsampled very significantly.</p>\n      <p>Due to hosting limitations on request timeouts, quality is compromised. Host locally for best results.</p>\n      <div className=\"left\">\n        <div className=\"drawboard\">\n          <CanvasDraw ref={canvasRef} hideGrid={true} brushRadius={brushRadius} brushColor={color} canvasWidth={width} canvasHeight={height} />\n        </div>\n        <div className=\"buttons\">\n          <button style={{backgroundColor:'#ff0000'}} onClick={() => updateColor('#ff0000')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#228B22'}} onClick={() => updateColor('#228B22')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#0000ff'}} onClick={() => updateColor('#0000ff')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#ffff00'}} onClick={() => updateColor('#ffff00')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#00ffff'}} onClick={() => updateColor('#00ffff')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#964b00'}} onClick={() => updateColor('#964b00')}>⠀⠀⠀</button>\n          <button style={{backgroundColor:'#000000'}} onClick={() => updateColor('#000000')}>⠀⠀⠀</button>\n          <label>\n          <select value={brushRadius} onChange={e => setBrushRadius(e.target.value)}>\n          <option value={2}>hungry</option>\n          <option value={4}>thin</option>\n          <option value={7}>normal</option>\n          <option value={15}>thick</option>\n          <option value={50}>monstrous</option>\n          <option value={800}>fill</option>\n          </select>\n        </label>\n        </div>\n        <label>\n          Pick your target class: \n          <select value={selectedClass} onChange={e => setSelectedClass(e.target.value)}>\n          <option value=\"0\">airplane</option>\n          <option value=\"1\">automobile</option>\n          <option value=\"2\">bird</option>\n          <option value=\"3\">cat</option>\n          <option value=\"4\">deer</option>\n          <option value=\"5\">dog</option>\n          <option value=\"6\">frog</option>\n          <option value=\"7\">horse</option>\n          <option value=\"8\">ship</option>\n          <option value=\"9\">truck</option>\n          </select>\n        </label>\n        <div className=\"submit\">\n        <button onClick={() => resetCanvas()}>Reset canvas</button>\n        \n        <button onClick={() => saveFile()}>Complete my image!</button>\n        </div>\n        \n      </div>\n      <div className=\"right\">\n        <div className=\"asdf\"></div>\n      </div>\n      \n    </body>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}